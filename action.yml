# action.yml
name: 'pyupio/safety'
description: 'Runs the Safety CLI against your project'
inputs:
  api-key:
    description: 'PyUp API key'
    required: false
    default: ''
  scan:
    description: 'Scan mode to use. One of auto / docker / env / file (defaults to auto)'
    required: false
    default: 'auto'
  docker-image:
    description: 'Tag or hash of the Docker Image to scan (defaults to autodetecting the last built tagged image)'
    required: false
    default: ''
  requirements:
    description: 'Path of requirements file to scan (defaults to poetry.lock -> Pipfile.lock -> requirements.txt)'
    required: false
    default: ''
  continue-on-error:
    description: 'By default, Safety will exit with a non-zero exit code if it detects any vulnerabilities. Set this to yes / true to not error out.'
    required: false
    default: ''
  output-format:
    description: 'Output format for returned data. One of screen / text / json / bare (defaults to screen)'
    required: false
    default: 'screen'
  args:
    description: '[Advanced] Any additional arguments to pass to Safety'
    required: false
    default: ''

outputs:
  cli-output:
    description: 'CLI output from Safety'
  exit-code:
    description: 'Exit code from Safety'

runs:
  using: 'docker'
  image: 'docker://pyupio/safety-v2-beta:latest'
  env:
    SAFETY_API_KEY: ${{ inputs.api-key }}
    SAFETY_ACTION: true
    SAFETY_ACTION_SCAN: ${{ inputs.scan }}
    SAFETY_ACTION_DOCKER_IMAGE: ${{ inputs.docker-image }}
    SAFETY_ACTION_REQUIREMENTS: ${{ inputs.requirements }}
    SAFETY_ACTION_CONTINUE_ON_ERROR: ${{ inputs.continue-on-error }}
    SAFETY_ACTION_OUTPUT_FORMAT: ${{ inputs.output-format }}
    SAFETY_ACTION_ARGS: ${{ inputs.args }}
    SAFETY_ACTION_FORMAT: true
    COLUMNS: 120
